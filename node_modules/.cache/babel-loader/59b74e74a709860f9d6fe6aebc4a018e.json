{"ast":null,"code":"var _jsxFileName = \"/home/missa355/music/musicsite/src/components/record.js\";\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport track2 from \"../music/track2.mp3\";\nimport Bottom from \"../components/bottom_player/bottom_player\";\nimport \"./record.css\";\nimport playbutt from \"../Photos/small_play.png\";\nimport { PropTypes } from 'prop-types';\nexport class record extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onclick = () => {\n      this.props.onClick();\n    };\n\n    this.state = {\n      // song_lst : [track1, track2, track3 ,track4],\n      song_names: [\"Dudley Theme song - Might night\", \"Wind waker - Zelda Orchestra\", \" Method Man - Wu-Tang Clan\", \"Light breez - Moonglight\"],\n      volume: 0.3,\n      track: this.props.track\n    };\n\n    this.componentDidMount = () => {\n      var title = document.getElementById(\"title1\");\n      title.innerText = \"♥ Why not pick a song OWO ♥ \";\n      var audio = document.getElementById(\"audio\");\n      audio.src = this.state.track;\n\n      audio.onended = () => {\n        this.forward();\n      };\n\n      var slider = document.getElementById(\"myRange1\");\n      slider.value = this.state.volume * 100;\n    };\n\n    this.play = (index, main) => {\n      // audio = document.getElementById(\"audio\")\n      audio.pause();\n      audio.src = this.state.song_lst[index];\n      audio.volume = this.state.volume;\n      var vin = document.getElementById(\"vinyl\");\n      var title = document.getElementById(\"title1\");\n      title.innerText = this.state.song_names[index];\n      is_on = true;\n      audio.play();\n      vin.setAttribute(\"style\", \"animation-play-state: running;\"); // if(main){\n      //     if(is_on){\n      //         audio.pause()\n      //         // this.setState({song_on: false})\n      //         is_on = false\n      //         vin.setAttribute(\"style\", \"animation-play-state: paused;\")\n      //         document.body.style.backgroundImage = \"url('../Photos/resume.png')\";\n      //         // document.getElementById(\"main\").src=back;\n      //     }\n      //     else{\n      //         // this.setState({song_on: true})\n      //         is_on = true;\n      //         audio.play()\n      //         vin.setAttribute(\"style\", \"animation-play-state: running;\");\n      //         // document.getElementById(\"main\").src=back2;\n      //     }\n      // }\n      // if(is_on){\n      //     audio.pause()\n      //     // this.setState({song_on: false})\n      //     is_on = false\n      //     vin.setAttribute(\"style\", \"animation-play-state: paused;\")\n      //     document.body.style.backgroundImage = \"url('../Photos/resume.png')\";\n      //     // document.getElementById(\"main\").src=back;\n      // }\n      // else{\n      //     // this.setState({song_on: true})\n      //     is_on = true;\n      //     audio.play()\n      //     vin.setAttribute(\"style\", \"animation-play-state: running;\");\n      //     // document.getElementById(\"main\").src=back2;\n      // }\n    };\n\n    this.forward = () => {\n      // this.setState({song_on: false})\n      is_on = false;\n      index = (index + 1) % 4; // this.setState({index: index % 3})\n\n      audio.src = this.state.song_lst[index];\n      this.play(index); // audio.play()\n    };\n\n    this.backward = () => {\n      is_on = false;\n      index = index - 1;\n\n      if (index < 0) {\n        index = 2;\n      }\n\n      audio.src = this.state.song_lst[index];\n      this.play(this.state.song_lst[index]);\n    };\n\n    this.SetVolume = () => {\n      var slider = document.getElementById(\"myRange1\");\n      this.setState({\n        volume: slider.value / 100\n      });\n      audio.volume = slider.value / 100;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"elem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: playbutt,\n      onClick: this.onclick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), \" \", React.createElement(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.props.name));\n  }\n\n} // propTypes\n\nrecord.propTypes = {\n  name: PropTypes.string.isRequired\n};\nexport default record;","map":{"version":3,"sources":["/home/missa355/music/musicsite/src/components/record.js"],"names":["React","Component","Typography","track2","Bottom","playbutt","PropTypes","record","onclick","props","onClick","state","song_names","volume","track","componentDidMount","title","document","getElementById","innerText","audio","src","onended","forward","slider","value","play","index","main","pause","song_lst","vin","is_on","setAttribute","backward","SetVolume","setState","render","name","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport track2 from \"../music/track2.mp3\"\nimport Bottom from \"../components/bottom_player/bottom_player\"\nimport \"./record.css\"\nimport playbutt from \"../Photos/small_play.png\"\nimport { PropTypes } from 'prop-types'\n\nexport class record extends Component {\n\n    onclick = () =>{\n        this.props.onClick()\n    }\n    state = {\n        // song_lst : [track1, track2, track3 ,track4],\n        song_names : [\"Dudley Theme song - Might night\", \"Wind waker - Zelda Orchestra\",\n                      \" Method Man - Wu-Tang Clan\" , \"Light breez - Moonglight\"],\n        volume: 0.3,\n        track: this.props.track\n    }\n\n    componentDidMount = () => {\n        var title = document.getElementById(\"title1\")\n        title.innerText = \"♥ Why not pick a song OWO ♥ \"\n        var audio = document.getElementById(\"audio\")\n        audio.src = this.state.track\n        audio.onended = () => {\n            this.forward()\n\n        }\n        var slider = document.getElementById(\"myRange1\")\n        slider.value = this.state.volume * 100\n\n\n    }\n    play = (index, main) =>{\n        // audio = document.getElementById(\"audio\")\n        audio.pause()\n        audio.src = this.state.song_lst[index]\n        audio.volume = this.state.volume \n        var vin = document.getElementById(\"vinyl\")\n        var title = document.getElementById(\"title1\")\n        title.innerText = this.state.song_names[index]\n        is_on = true;\n        audio.play()\n        vin.setAttribute(\"style\", \"animation-play-state: running;\");\n\n        // if(main){\n        //     if(is_on){\n        //         audio.pause()\n                \n        //         // this.setState({song_on: false})\n        //         is_on = false\n        //         vin.setAttribute(\"style\", \"animation-play-state: paused;\")\n        //         document.body.style.backgroundImage = \"url('../Photos/resume.png')\";\n        //         // document.getElementById(\"main\").src=back;\n\n        //     }\n        //     else{\n        //         // this.setState({song_on: true})\n        //         is_on = true;\n        //         audio.play()\n        //         vin.setAttribute(\"style\", \"animation-play-state: running;\");\n        //         // document.getElementById(\"main\").src=back2;\n\n                \n        //     }\n        // }\n        // if(is_on){\n        //     audio.pause()\n            \n        //     // this.setState({song_on: false})\n        //     is_on = false\n        //     vin.setAttribute(\"style\", \"animation-play-state: paused;\")\n        //     document.body.style.backgroundImage = \"url('../Photos/resume.png')\";\n        //     // document.getElementById(\"main\").src=back;\n\n        // }\n        // else{\n        //     // this.setState({song_on: true})\n        //     is_on = true;\n        //     audio.play()\n        //     vin.setAttribute(\"style\", \"animation-play-state: running;\");\n        //     // document.getElementById(\"main\").src=back2;\n\n            \n        // }\n    }\n\n    forward = () => {\n        // this.setState({song_on: false})\n        is_on = false;\n        index = (index + 1) % 4\n        // this.setState({index: index % 3})\n        audio.src = this.state.song_lst[index]\n        this.play(index)\n        // audio.play()\n\n\n        \n    }\n\n    backward = () => {\n        is_on = false;\n        index = index - 1\n        if(index < 0){\n            index = 2\n        }\n        audio.src = this.state.song_lst[index]\n        this.play(this.state.song_lst[index])\n\n    \n        \n    }\n\n    SetVolume = () => {\n        var slider = document.getElementById(\"myRange1\")\n            this.setState({\n              volume: slider.value / 100\n            })\n        audio.volume = slider.value / 100\n    }\n    \n    render() {\n        return (\n            <div className=\"elem\">\n                <img src={playbutt} onClick={this.onclick}/> <Typography variant=\"h5\">{this.props.name}</Typography>\n                \n            </div>\n        )\n    }\n}\n\n// propTypes\nrecord.propTypes = {\n    name: PropTypes.string.isRequired\n}\n\nexport default record\n"]},"metadata":{},"sourceType":"module"}